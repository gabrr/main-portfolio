{"version":3,"sources":["components/navbar/index.jsx","redux/reducers/state.js","redux/reducers/allReducers.js","redux/store/index.js","App.jsx","serviceWorker.js","index.js"],"names":["Navbar","props","state","openMenu","bind","toggler","document","getElementById","navList","blured","linkBehind","addEventListener","classList","toggle","childNodes","forEach","el","e","style","left","screenX","top","screenY","console","log","innerHTML","this","id","Component","INITIAL_STATE","stateReducer","action","type","item","combineReducers","store","createStore","reducers","App","className","margin","width","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUAGqBA,G,kBACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,GAIb,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAPD,E,wEAWf,IAAMC,EAAUC,SAASC,eAAe,WAClCC,EAAUF,SAASC,eAAe,gBAClCE,EAASH,SAASC,eAAe,UACjCG,EAAaJ,SAASC,eAAe,eAE3CF,EAAQM,iBAAiB,SAAS,WAC9BN,EAAQO,UAAUC,OAAO,aACzBL,EAAQI,UAAUC,OAAO,aACzBJ,EAAOG,UAAUC,OAAO,gBAG5BL,EAAQM,WAAWC,SAAQ,SAAAC,GACvBA,EAAGL,iBAAiB,aAAa,SAACM,GAC9BP,EAAWQ,MAAMC,KAAjB,qBAAsCF,EAAEG,QAAU,GAAlD,OACAV,EAAWQ,MAAMG,IAAjB,UAA0BJ,EAAEK,QAAU,GAAtC,MACAC,QAAQC,IAAIP,SAIpBT,EAAQM,WAAWC,SAAQ,SAAAC,GACvBA,EAAGL,iBAAiB,cAAc,SAACM,GAC/BP,EAAWe,UAAYT,EAAGS,kB,0CAMlCC,KAAKvB,a,+BAIL,OACI,yBAAKwB,GAAG,UACJ,yBAAKA,GAAG,QAAR,SACA,yBAAKA,GAAG,WACJ,8BACA,+BAEJ,yBAAKA,GAAG,WACR,wBAAIA,GAAG,gBACH,yBAAKA,GAAG,eAAR,QACA,oCACA,qCACA,yCACA,6C,GAxDgBC,c,eCHhCC,EAAgB,CAChB,sBAYWC,EATM,WAAoC,IAAnC5B,EAAkC,uDAA1B2B,EAAeE,EAAW,uCACpD,OAAQA,EAAOC,MACX,IAAK,SACD,MAAM,GAAN,mBAAW9B,GAAX,CAAkB6B,EAAOE,OAC7B,QACI,OAAO/B,ICNJgC,cAAgB,CAC3BhC,UCCWiC,EAFDC,YAAYC,G,QCoBXC,MAhBf,WACE,OACE,kBAAC,IAAD,CAAUH,MAAOA,GACf,yBAAKI,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKrB,MAAO,CAACsB,OAAQ,YAAaC,MAAO,QACzC,4QACA,4QACA,gRCHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS1C,SAASC,eAAe,SD6H3C,kBAAmB0C,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.477319f0.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport \"./style.css\"\n\nexport default class Navbar extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n\n        }\n\n        this.openMenu = this.openMenu.bind(this)\n    }\n\n    openMenu() {\n        const toggler = document.getElementById('toggler')\n        const navList = document.getElementById('navbar-links')\n        const blured = document.getElementById('blured')\n        const linkBehind = document.getElementById('link-behind')\n\n        toggler.addEventListener('click', () => {\n            toggler.classList.toggle('activated')\n            navList.classList.toggle('activated')\n            blured.classList.toggle('activated')\n        })\n\n        navList.childNodes.forEach(el => {\n            el.addEventListener('mousemove', (e) => {\n                linkBehind.style.left = `calc(45% + ${e.screenX / 10}px)`\n                linkBehind.style.top = `${e.screenY / 10}px`\n                console.log(e)\n            })\n        })\n\n        navList.childNodes.forEach(el => {\n            el.addEventListener('mouseenter', (e) => {\n                linkBehind.innerHTML = el.innerHTML\n            })\n        })\n    }\n\n    componentDidMount() {\n        this.openMenu()\n    }\n\n    render() {\n        return (\n            <nav id=\"Navbar\">\n                <div id=\"logo\">gabrr</div>\n                <div id=\"toggler\">\n                    <div></div>\n                    <div></div>\n                </div>\n                <div id=\"blured\"></div>\n                <ul id=\"navbar-links\">\n                    <div id=\"link-behind\">Home</div>\n                    <li>Home</li>\n                    <li>About</li>\n                    <li>Portfolio</li>\n                    <li>Contact</li>\n                </ul>\n            </nav>\n        )\n    }\n}\n","let INITIAL_STATE = [\n    \"Data only for test\"\n]\n\nconst stateReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case \"INSERT\":\n            return [...state, action.item]\n        default:\n            return state\n    }\n}\n\nexport default stateReducer","import state from \"./state\"\nimport { combineReducers } from 'redux'\n\nexport default combineReducers({\n    state,\n})","import { createStore } from \"redux\";\nimport reducers from \"../reducers/allReducers\"\n\nconst store = createStore(reducers);\n\nexport default store","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/navbar'\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Navbar />\n        <div style={{margin: \"60px auto\", width: \"80%\"}}>\n        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. A accusantium rerum deserunt recusandae maxime perspiciatis, ullam aliquam inventore animi, tenetur pariatur assumenda exercitationem molestiae odit officiis et totam, quos nobis.</p>\n        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. A accusantium rerum deserunt recusandae maxime perspiciatis, ullam aliquam inventore animi, tenetur pariatur assumenda exercitationem molestiae odit officiis et totam, quos nobis.</p>\n        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. A accusantium rerum deserunt recusandae maxime perspiciatis, ullam aliquam inventore animi, tenetur pariatur assumenda exercitationem molestiae odit officiis et totam, quos nobis.</p>\n\n        </div>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}